@using System.Linq.Expressions
@model EditPackageVersionRequest
@{
    ViewBag.Title = "Editing: " + Model.PackageTitle + " " + Model.Version;
    ViewBag.Tab = "Packages";
    Layout = "~/Views/Shared/TwoColumnLayout.cshtml";
}

@Styles.Render("~/Content/font-awesome.css")

@section BottomScripts {
    @Scripts.Render("~/Scripts/jquery-ui-1.10.3.js")
    @Scripts.Render("~/Scripts/jquery.form.js");
    <script>
        $(function () {
            function RunValidationForEvent(event) {
                var target = $(event.target);
                var validator = $.data(event.target.form, "validator"),
                    eventType = "on" + event.type.replace(/^validate/, "");
                validator.settings[eventType] && validator.settings[eventType].call(validator, event.target);
            }

            function UpdateIconAndRunValidation(event) {
                var target = event.target;
                var newValue = event.target.value;
                $('#IconUrl_Preview').remove();
                if (newValue.trim().length) {
                    $(target).after($('<img class="logo" id="IconUrl_Preview" alt="Icon Preview" src="' + encodeURI(newValue) + '"></img>'))
                }

                RunValidationForEvent(event);
            }

            function SetupInput(name) {
                SetDataEditedFlag = function (event) {
                    $(event.target).attr("data-edited", event.target.value != event.target.defaultValue);
                    if (event.target.value != event.target.defaultValue) {
                        $("#Undo" + name).show();
                    } else {
                        $("#Undo" + name).hide();
                    }
                };

                $("input[id=" + name + "]").keyup(SetDataEditedFlag);
                $("textarea[id=" + name + "]").keyup(SetDataEditedFlag);
                $("select[id=" + name + "]").change(SetDataEditedFlag);

                $("#Undo" + name + "").click(function (event) {
                    event.preventDefault();
                    $(this.form.elements["" + name + ""]).each(function () {
                        this.value = this.defaultValue;
                        $(this).attr("data-edited", "false");
                    });
                    $("#Undo" + name).hide();
                });
            }

            SetupInput('VersionTitle');
            SetupInput('Description');
            SetupInput('Summary');
            SetupInput('IconUrl');
            SetupInput('ProjectUrl');
            SetupInput('Authors');
            SetupInput('Copyright');
            SetupInput('Tags');
            SetupInput('ReleaseNotes');

            @if (!String.IsNullOrEmpty(Model.LicenseUrl))
            {
                <text>
                SetupInput('RequiresLicenseAcceptance');

                // Fix our SetupInput function to work with RequiresLicenseAcceptance
                // Set up the defaultValue property on the <select> element - which doesn't have a defaultValue defined by default for some reason
                $("#RequiresLicenseAcceptance")[0].defaultValue = "@(Model.RequiresLicenseAcceptance ? "true" : "false")";
                </text>
            }

            $("#ProjectUrl").bind("focusin focusout", RunValidationForEvent);
            $("#IconUrl").bind("focusin focusout", UpdateIconAndRunValidation);

            $("#UndoIconUrl").click(function () {
                var validator = $.data($("#IconUrl")[0].form, "validator");
                validator.settings["onfocusout"].call(validator, $("#IconUrl")[0]);
            });
            $("#UndoProjectUrl").click(function () {
                var validator = $.data($("#ProjectUrl")[0].form, "validator");
                validator.settings["onfocusout"].call(validator, $("#ProjectUrl")[0]);
            });

            $("#UndoIconUrl").click(function () {
                var x = $("#IconUrl")[0];
                var newValue = x.value;
                $('#IconUrl_Preview').remove();
                if (newValue.trim().length) {
                    $(x).after($('<img class="logo" id="IconUrl_Preview" alt="Icon Preview" src="' + encodeURI(newValue) + '"></img>'))
                }
            });
        });

        // Scripts for dialog for prompting you to save when you navigate away
        $(function () {
            var href = '';
            $("#navigate-away-dialog").dialog({
                autoOpen: false,
                width: 350,
                resizable: false,
                modal: true,
                buttons: [{
                    text: "Save", click: function () {
                        // form.submit by AJAX so we can see if it succeeded or failed.
                        $(document.forms.EditForm).ajaxSubmit({
                            success: function (response) {
                                // success - continue navigating
                                window.location.href = href;
                            },
                            error: function (response) {
                                // error - what went wrong?
                                alert("The form could not be saved: " + response);
                            }
                        });
                    }
                },
                {
                    text: "Don't Save", click: function () {
                        window.location.href = href;
                    }
                },
                {
                    text: "Cancel", click: function () {
                        $("#navigate-away-dialog").dialog("close");
                    }
                }],
            });

            function ReadFormValues(dictionary) {
                $("textarea").each(function () {
                    dictionary[this.id] = this.value;
                });
                $("input:text").each(function () {
                    dictionary[this.id] = this.value;
                });
                $("input:radio").each(function () {
                    dictionary[this.id] = this.checked;
                });
                $("input:checkbox").each(function () {
                    dictionary[this.id] = this.checked;
                });
            };

            var initialDictionary = [];
            ReadFormValues(initialDictionary);

            $("a").click(function (event) {
                var dictionary = [];
                ReadFormValues(dictionary);
                for (var key in initialDictionary) {
                    if (initialDictionary.hasOwnProperty(key) &&
                        dictionary[key] != initialDictionary[key]) {
                        href = event.target.href;
                        $("#navigate-away-dialog").dialog("open");
                        return false;
                    }
                }
            });
        });
    </script>
}

@Styles.Render("~/Content/themes/custom/jquery-ui-1.10.3.custom.css")
<div id="navigate-away-dialog" title="Save Changes?">
    <p>
    You are about to view a different page but your changes are not yet saved. Do you wish to save your changes?
    </p>
</div>

@section SideColumn {
    @{
        var isRootSelected = Model.Version == null;
        <nav id="edit-list">
            <h2>Editing</h2>
            <span class="edit-root">
                @(Model.PackageId)
            </span>
            <ul id="packageVersions">
            @foreach (var version in Model.PackageVersions)
            {
                var versionStr = version.Version;
                var isSelected = string.Equals(Model.Version, versionStr, StringComparison.OrdinalIgnoreCase);
                <li>
                    <span class="@(isSelected ? "edit-tree-selected" : "edit-tree")">
                        @if (isSelected)
                        {
                            <text>@(versionStr)</text>
                        }
                        else
                        {
                            <a href="@Url.EditPackage(Model.PackageId, versionStr)" >@(versionStr)</a>
                        }
                        @if (!version.Listed)
                        {
                            <text>(unlisted)</text>
                        }
                        @if (version.IsLatest)
                        {
                            <text>(latest)</text>
                        }
                        else if (version.IsLatestStable)
                        {
                            <text>(latest stable)</text>
                        }
                    </span>
                </li>
            }
            </ul>
        </nav>
    }
}

@helper EditableField(string name, Expression<Func<EditPackageVersionRequest, object>> func, bool link = false, bool pre = false)
{
    var formid = ExpressionHelper.GetExpressionText(func).Replace(".", "_");
    object temp = func.Compile().Invoke(Model);
    string value = temp == null ? null : temp.ToString();
    <h4>@name
        <button type="button" class="undo-button" id="@("Undo" + formid)" style="display: none"><span class="icon-undo" title="Undo Edit"></span></button>
    </h4>
    <div style="position: relative">
        <div id="@(formid + "Field")" style="width: 100%">
            <div class="form-field" style="display: inline">
                @Html.EditorFor(func)
                @Html.ValidationMessageFor(func)
            </div>
        </div>
    </div>
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "EditForm" }))
{
    <fieldset class="form">
        <legend>Edit @(Model.PackageId) @(Model.Version)</legend>

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <ul id="packageDetails" style="border-bottom: 1px solid gray; margin-bottom: 1em;">
        @if (Model != null)
        {
            <li>@EditableField("Title", m => m.VersionTitle)</li>
            <li>@EditableField("Description (a longer description)", m => m.Description)</li>
            <li>@EditableField("Summary (visible in search results)", m => m.Summary)</li>
            <li>@EditableField("Icon URL", m => m.IconUrl, link: true)</li>
            <li>@EditableField("Project URL", m => m..ProjectUrl, link: true)</li>
            <li>@EditableField("Authors (comma-separated list - example: 'Annie, Bob, Charlie')", m => m.Authors)</li>
            <li>@EditableField("Copyright", m => m.Copyright)</li>
            <li>@EditableField("Tags (space-separated keywords - example: 'CommandLine ASP.NET Proxies Scaffolding)", m => m.Tags)</li>
            <li>@EditableField("Release Notes (for this version)", m => m.ReleaseNotes)</li>

            if (!String.IsNullOrEmpty(Model.LicenseUrl))
            {
                <li>
                    <h4>Requires License Acceptance
                        @{
                            var formid2 = "RequiresLicenseAcceptance";
                            <button type="button" class="undo-button" id="@("Undo" + formid2)" style="display: none"><span class="icon-undo"></span></button>
                        }
                    </h4>
                    <div style="position: relative">
                        <div id="RequiresLicenseAcceptanceField" style="width: 100%">
                            <div class="form-field" style="display: inline">
                                @Html.DropDownList("RequiresLicenseAcceptance", 
                                    new List<SelectListItem>
                                    {
                                        new SelectListItem { Text = "Yes", Value = "true" },
                                        new SelectListItem { Text = "No", Value = "false" },
                                    })
                                @Html.ValidationMessageFor(model => model.RequiresLicenseAcceptance)
                            </div>
                        </div>
                    </div>
                </li>
            }
        }
        </ul>

    <h2>Note:</h2>
    <p>
        To edit package dependencies, target frameworks, or license URL, you must upload a new version of the package. 
        Edits to package Icon, Title, and Summary may take a while to be shown in package search results.
    </p>
    <input type="submit" value="Save" title="Save" />
    </fieldset>
}
